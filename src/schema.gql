# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  email: String!
  bio: String!
  password: String!
  name: String!
  phone: String!
  gender: Gender!
  birdDate: DateTime!
  role: Role!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum Gender {
  M
  F
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Role {
  CLIENT
  ARCHITECT
}

type AuthModel {
  user: User!
  token: String!
}

type ServiceRequest {
  id: ID!
  title: String!
  description: String!
  status: StatusService!
  cRequestId: String
  aRequestId: String
}

enum StatusService {
  REQUESTED
  ACCEPTED
  DECLINED
}

type Query {
  users: [User!]!
  userById(id: String!): User!
  userByEmail(email: String!): User!
  userByRole(role: String!): [User!]!
  findAllServiceRequest(id: String!): [ServiceRequest!]!
  findOneServiceRequest(id: String!): ServiceRequest!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  updateUser(id: String!, data: UpdateUserInput!): User!
  deleteUser(id: String!): Boolean!
  login(data: AuthInput!): AuthModel!
  createServiceRequest(data: CreateServiceRequestInput!): ServiceRequest!
  updateServiceRequest(id: String!, data: UpdateServiceRequestInput!): ServiceRequest!
  removeServiceRequest(id: String!): Boolean!
}

input CreateUserInput {
  email: String!
  password: String!
  name: String!
  bio: String!
  phone: String!
  gender: Gender!
  birdDate: DateTime!
  role: Role!
}

input UpdateUserInput {
  name: String
  bio: String
  password: String
  phone: String
  gender: Gender
  birdDate: DateTime
  role: Role
}

input AuthInput {
  email: String!
  password: String!
}

input CreateServiceRequestInput {
  title: String!
  description: String!
  status: StatusService!
  cRequestId: String
  aRequestId: String
}

input UpdateServiceRequestInput {
  title: String
  description: String
  status: StatusService
}